name: Build and deploy

on:
  push:
    branches: [release]
    paths-ignore:
      - 'devops/**'
  workflow_dispatch:

jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
  unique_id:
    runs-on: ubuntu-latest
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "::set-output name=id::$(uuidgen)"
    outputs:
      unique_id: ${{ steps.unique_id.outputs.id }}
  install-build-and-push:
    runs-on: ubuntu-latest 
    needs: [cancel-previous, unique_id]
    steps:
      - name: Get GHA environment name
        id: env_vars
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
            echo "::set-output name=aws_access_key_id::${{ secrets.SECOPS_PROD_AWS_ACCESS_KEY_ID }}"
            echo "::set-output name=aws_secret_key::${{ secrets.SECOPS_PROD_AWS_SECRET_ACCESS_KEY }}"
            echo "::set-output name=aws_region::${{ secrets.SECOPS_PROD_AWS_REGION }}"
            echo "::set-output name=aws_ecr_repository::${{ secrets.SECOPS_PROD_ECR_REPOSITORY }}"
          else
            echo "Branch ${{ github.ref }} is not configured for deployment"
            exit 1
          fi
      - uses: actions/checkout@v2

      - name: Setup app dependencies
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            authorization-server/node_modules
            backend-server/node_modules
            generate-identity-cli/node_modules

          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: Check linting
        run: yarn lint

      - name: Build project
        run: yarn build

      - name: Test project
        run: yarn test

      - name: Get the tag version
        
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Login to Public ECR
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ steps.env_vars.outputs.aws_access_key_id }}
          password: ${{ steps.env_vars.outputs.aws_secret_key }}
        env:
          AWS_REGION: ${{ steps.env_vars.outputs.aws_region }}

      - name: Build & push docker images (AWS)
        env:
          BUILD_ID: ${{needs.unique_id.outputs.unique_id}}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID -f authorization-server/Dockerfile ./authorization-server
          docker push $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID
          docker tag $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:latest
          docker push $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

