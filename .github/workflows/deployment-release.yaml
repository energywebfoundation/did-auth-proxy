name: Build and deploy

on:
  push:
    branches: [release]
    paths-ignore:
      - 'devops/**'
  workflow_dispatch:

jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}
  unique_id:
    runs-on: ubuntu-latest
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "::set-output name=id::$(uuidgen)"
    outputs:
      unique_id: ${{ steps.unique_id.outputs.id }}
  install-build-and-push:
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id]
    steps:
      - name: Get GHA environment name
        id: env_vars
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
            echo "::set-output name=aws_access_key_id::${{ secrets.SECOPS_PROD_AWS_ACCESS_KEY_ID }}"
            echo "::set-output name=aws_secret_key::${{ secrets.SECOPS_PROD_AWS_SECRET_ACCESS_KEY }}"
            echo "::set-output name=aws_region::${{ secrets.SECOPS_PROD_AWS_REGION }}"
            echo "::set-output name=aws_ecr_repository::${{ secrets.SECOPS_PROD_ECR_REPOSITORY }}"
          else
            echo "Branch ${{ github.ref }} is not configured for deployment"
            exit 1
          fi
      - uses: actions/checkout@v3

      - name: Setup app dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            authorization-server/node_modules
            backend-server/node_modules
            generate-identity-cli/node_modules

          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: Check linting
        run: yarn lint

      - name: Build project
        run: yarn build

      - name: Test project
        env:
          LOG_LEVEL: 'error'
          RPC_URL: 'https://volta-rpc-vkn5r5zx4ke71f9hcu0c.energyweb.org/'
          CACHE_SERVER_URL: 'https://identitycache-dev.energyweb.org/v1'
          CACHE_SERVER_LOGIN_PRVKEY: 'eab5e5ccb983fad7bf7f5cb6b475a7aea95eff0c6523291b0c0ae38b5855459c'
          DID_REGISTRY_ADDRESS: '0xc15d5a57a8eb0e1dcbe5d88b8f9a82017e5cc4af'
          ENS_REGISTRY_ADDRESS: '0xd7CeF70Ba7efc2035256d828d5287e2D285CD1ac'
          ENS_RESOLVER_ADDRESS: '0xcf72f16Ab886776232bea2fcf3689761a0b74EfE'
          IPFS_HOST: 'ewipfsgwtest.infura-ipfs.io'
          IPFS_PORT: 443
          REDIS_HOST: 'localhost'
          REDIS_PORT: 61379
          JWT_SECRET: 'asecret'
          JWT_ACCESS_TTL: 60
          JWT_REFRESH_TTL: 600
          FAIL_ON_REDIS_UNAVAILABLE: true
          AUTH_COOKIE_ENABLED: true
          IDENTITY_TOKEN: ${{ secrets.IDENTITY_TOKEN }}
          ACCEPTED_ROLES: 'role1.roles.app1.apps.artur3.iam.ewc'
          INCLUDE_ALL_ROLES: false
        run: yarn test

      - name: Get the tag version

        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Login to Public ECR
        uses: docker/login-action@v2
        with:
          registry: public.ecr.aws
          username: ${{ steps.env_vars.outputs.aws_access_key_id }}
          password: ${{ steps.env_vars.outputs.aws_secret_key }}
        env:
          AWS_REGION: ${{ steps.env_vars.outputs.aws_region }}

      - name: Build & push docker images (AWS)
        env:
          BUILD_ID: ${{needs.unique_id.outputs.unique_id}}

        run: |
          docker build -t public.ecr.aws/p2b6f2f9/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID -f authorization-server/Dockerfile ./authorization-server
          docker push public.ecr.aws/p2b6f2f9/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID
          docker tag public.ecr.aws/p2b6f2f9/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID public.ecr.aws/p2b6f2f9/${{ steps.env_vars.outputs.aws_ecr_repository }}:latest
          docker push public.ecr.aws/p2b6f2f9/${{ steps.env_vars.outputs.aws_ecr_repository }}:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

