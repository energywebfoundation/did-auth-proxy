name: Build and deploy

on:
  push:
    branches: [develop]
    paths-ignore:
      - 'devops/**'
  workflow_dispatch:

jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}
  unique_id:
    runs-on: ubuntu-latest
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "::set-output name=id::$(uuidgen)"
    outputs:
      unique_id: ${{ steps.unique_id.outputs.id }}
  install-build-and-push:
    runs-on: ubuntu-latest 
    needs: [cancel-previous, unique_id]
    steps:
      - name: Get GHA environment name
        id: env_vars
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "::set-output name=aws_access_key_id::${{ secrets.DEV_AWS_ACCESS_KEY_ID }}"
            echo "::set-output name=aws_secret_key::${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}"
            echo "::set-output name=aws_region::${{ secrets.DEV_AWS_REGION }}"
            echo "::set-output name=aws_ecr_repository::${{ secrets.DEV_ECR_REPOSITORY }}"
            echo "::set-output name=argocd_url::${{ secrets.DEV_ARGOCD_URL }}"
            echo "::set-output name=argocd_username::${{ secrets.DEV_ARGOCD_USERNAME }}"
            echo "::set-output name=argocd_password::${{ secrets.DEV_ARGOCD_PASS }}"
            echo "::set-output name=argocd_app_name::"did-auth-proxy"
            echo "::set-output name=argocd_tag::"did-auth-proxy-helm.image.tag"
          else
            echo "Branch ${{ github.ref }} is not configured for deployment"
            exit 1
          fi
      - uses: actions/checkout@v2

      - name: Setup app dependencies
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            authorization-server/node_modules
            backend-server/node_modules
            generate-identity-cli/node_modules

          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install

      - name: Check linting
        run: yarn lint

      - name: Build project
        run: yarn build

      - name: Test project
        run: yarn test

      - name: Get the tag version
        
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.env_vars.outputs.aws_access_key_id }}
          aws-secret-access-key: ${{ steps.env_vars.outputs.aws_secret_key }}
          aws-region: ${{ steps.env_vars.outputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push docker images (AWS)
        env:
          BUILD_ID: ${{needs.unique_id.outputs.unique_id}}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID -f authorization-server/Dockerfile ./authorization-server
          docker push $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID
          docker tag $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:$BUILD_ID $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:latest
          docker push $ECR_REGISTRY/${{ steps.env_vars.outputs.aws_ecr_repository }}:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
      
      - name: Login to Azure registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.ACR_REGISTRY_USERNAME }}
          password: ${{ secrets.ACR_REGISTRY_PASSWORD }}

      - name: Push image (Azure)
        env:
          BUILD_ID: ${{needs.unique_id.outputs.unique_id}}
          ACR_REGISTRY: ${{ secrets.ACR_REGISTRY_LOGIN_SERVER }}
          REPO_NAME: ${{ steps.env_vars.outputs.aws_ecr_repository }}
        run: |
          docker tag ${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:$BUILD_ID $ACR_REGISTRY/$REPO_NAME:$BUILD_ID
          docker push $ACR_REGISTRY/$REPO_NAME:$BUILD_ID
          docker tag $ACR_REGISTRY/$REPO_NAME:$BUILD_ID $ACR_REGISTRY/$REPO_NAME:canary
          docker push $ACR_REGISTRY/$REPO_NAME:canary

      - name: ArgoCD login
        uses: clowdhaus/argo-cd-action/@v1.13.0
        id: argocd_login
        with:
          command: login ${{ steps.env_vars.outputs.argocd_url }}
          options: --insecure --password ${{ steps.env_vars.outputs.argocd_password }} --username ${{ steps.env_vars.outputs.argocd_username }}

      - name: ArgoCD overvrite HELM values.yaml
        uses: clowdhaus/argo-cd-action/@v1.13.0
        id: argocd_image_helm_tag_overwrite
        with:
          command: app set ${{ steps.env_vars.outputs.argocd_app_name }}
          options: -p did-auth-proxy-helm.image.tag=${{needs.unique_id.outputs.unique_id}}

      - name: Reset ArgoCD
        run: rm -rf /home/runner/argocd

      - name: ArgoCD(DDhub-dev) login
        uses: clowdhaus/argo-cd-action/@v1.13.0
        with:
          command: login ${{ secrets.ARGOCD_DDHUB_DEV_URL }}
          options: --insecure --password ${{ secrets.ARGOCD_DDHUB_DEV_PASS }} --username ${{ secrets.ARGOCD_DDHUB_DEV_USERNAME }}

      - name: ArgoCD(DDhub-dev) overvrite values.yaml
        uses: clowdhaus/argo-cd-action/@v1.13.0
        with:
          command: app set ddhub-messagebroker-dev
          options: -p did-auth-proxy-helm.image.tag=${{needs.unique_id.outputs.unique_id}}
