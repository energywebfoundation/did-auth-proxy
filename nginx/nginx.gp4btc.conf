map $http_origin $allow_origin {
  default "";
  "~^https?://(localhost:4200|localhost:4201)$" "$http_origin";
}

map $request_method $cors_method {
  default "allowed";
  "OPTIONS" "preflight";
}

map $cors_method $cors_max_age {
  default "";
  "preflight" 1;
}

map $cors_method $cors_allow_methods {
  default "";
  "preflight" "GET, POST, OPTIONS";
}

map $cors_method $cors_allow_headers {
  default "";
  "preflight" "Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since";
}

map $cors_method $cors_content_length {
  default $initial_content_length;
  "preflight" 0;
}

map $cors_method $cors_content_type {
  default $initial_content_type;
  "preflight" "text/plain charset=UTF-8";
}

server {
    listen       80;
    listen  [::]:80;
    server_name  _;

    location /auth {
        proxy_pass http://auth-server;
    }

    location /api-auth {
        proxy_pass http://auth-server;
    }

    location /auth/healthcheck {
        proxy_pass http://auth-server/healthcheck;
    }

    location /api {
        proxy_pass http://host.docker.internal:3000; # this is a gp4btc backend
    }

    location / {
        auth_request /token_introspection;
        proxy_pass http://host.docker.internal:3000;  # this is a gp4btc backend

        # WARNING!!!
        # gp4btc backend needs to have CORS headers disable completely,
        # otherwise they will duplicate and will not be accepted by browsers

        add_header Access-Control-Allow-Origin $allow_origin  always;
        add_header Access-Control-Allow-Credentials 'true'  always;
        add_header Access-Control-Max-Age $cors_max_age  always;
        add_header Access-Control-Allow-Methods $cors_allow_methods  always;
        add_header Access-Control-Allow-Headers $cors_allow_headers  always;

        set $initial_content_length $sent_http_content_length;
        add_header 'Content-Length' ""  always;
        add_header 'Content-Length' $cors_content_length  always;

        set $initial_content_type $sent_http_content_type;
        add_header Content-Type ""  always;
        add_header Content-Type $cors_content_type  always;

        if ($request_method = 'OPTIONS') {
          return 204;
        }
    }

    location /explorer {
        proxy_pass http://host.docker.internal:3000; # this is a gp4btc backend

        # WARNING!!!
        # gp4btc backend needs to have CORS headers disable completely,
        # otherwise they will duplicate and will not be accepted by browsers

        add_header Access-Control-Allow-Origin $allow_origin  always;
        add_header Access-Control-Allow-Credentials 'true'  always;
        add_header Access-Control-Max-Age $cors_max_age  always;
        add_header Access-Control-Allow-Methods $cors_allow_methods  always;
        add_header Access-Control-Allow-Headers $cors_allow_headers  always;

        set $initial_content_length $sent_http_content_length;
        add_header 'Content-Length' ""  always;
        add_header 'Content-Length' $cors_content_length  always;

        set $initial_content_type $sent_http_content_type;
        add_header Content-Type ""  always;
        add_header Content-Type $cors_content_type  always;

        if ($request_method = 'OPTIONS') {
        # this is necessary because preflight requests do not contain auth headers
          return 204;
        }
    }

    location /gp4btc/healthcheck {
        proxy_pass http://host.docker.internal:3000/healthcheck; # this is a gp4btc backend
    }

    location = /token_introspection {
        internal;
        proxy_method      GET;
        proxy_set_header  Authorization "$http_authorization";
        proxy_set_header  Content-Length "";
        proxy_pass        http://auth-server/auth/token-introspection;
    }
}
